---
title: Homework 7 - Creating a resume database
author: James Shen
date: November 25, 2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

The following project is my first attempt ever at creating a database from scratch by connecting to a php server and then using sql to create tables and insert data. The following document also provides some queries and their results.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-jshen8302>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
   'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The following database is designed to store the certifications and skills of all the employees in a company.

## Crows-foot diagram

There are three main entities for people, roles, and skills. Then there are two additional entities called peopleskills and peopleroles that link an individual person with their associated roles and skills. 

```{mermaid}
erDiagram

peopleskills }|--|{ skill : has
peopleskills }|--|| people : has
peopleroles ||--|| people : has
peopleroles }|--|{ role : has
    
    
people{
    int people_id
    string first_name
    string last_name
    string email
    string linkedin_url
    string headshot_url
    string discord_handle
    string brief_bio
    date date_joined
}
role {
    int role_id
    string name
    int sort_priority
}
skill {
    int skill_id
    string name
    string description
    string tag
    string url
    string time_commitment
}
peopleskills {
    int peopleskills_id
    int skills_id
    int people_id
    date date_acquired
}
peopleroles {
    int peopleroles_id
    int eople_id
    int role_id
    date date_assigned
}




```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe an id to serve as the primary key to identify an individual person. It also contains elements for the persons first and last name. Other personal information is also stored such as the persons email, linkedin url, headshot url, discord handle, a brief bio, and the date they joined.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = """
SELECT people_id, people_first_name, people_last_name, email, linkedin_url, discord_handle, brief_bio, date_joined
FROM people;
"""

try:
    df = pd.read_sql(sql, cnx, index_col='people_id')
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe an id that serves as the primary key for the skill. Theres also a name, description, tag, url, and time commitment for each skill.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = """
SELECT skills_id, skills_name, skills_description, skills_tag, skills_url, skills_time_commitment
FROM skills;
"""

try:
    df = pd.read_sql(sql, cnx, index_col='skills_id')
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### Roles table

The *roles* table contains elements that describe a role id which serves as the primary key. Every role also has a name and a sort priority. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = """
SELECT roles_id, roles_name, sort_priority
FROM roles;
"""

try:
    df = pd.read_sql(sql, cnx, index_col='roles_id')
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name


```{python}
#| echo: false
#| eval: true
sql = """
SELECT people_first_name, people_last_name, email
FROM people
ORDER BY people_last_name;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = """
SELECT s.skills_name
FROM skills s
JOIN peopleskills ps ON s.skills_id = ps.skills_id
JOIN people p ON ps.people_id = p.people_id
WHERE p.people_id = 1;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = """
SELECT DISTINCT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id = 6;

"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = """
SELECT DISTINCT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
WHERE pr.role_id = 2;




"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = """
SELECT people_first_name, people_last_name, email
FROM people
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleskills
    WHERE people.people_id = peopleskills.people_id
);

"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = """
SELECT skills_name, skills_tag
FROM skills
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleskills
    WHERE skills.skills_id = peopleskills.skills_id
);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.people_first_name, p.people_last_name, s.skills_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.roles_id AND r.roles_name = 'Boss'
LEFT JOIN peopleskills ps ON p.people_id = ps.people_id
LEFT JOIN skills s ON ps.skills_id = s.skills_id;

"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = """
SELECT roles_id, roles_name
FROM roles
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleroles
    WHERE roles.roles_id = peopleroles.role_id
);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

This project provided a good introduction to using sql and being able to create our own database from scratch. I felt as it wasn't too overwhelming since we got a chance to set everything set up in HW6 and was already had some experience in regards to interacting with a database. However, this project allowed us to be able to create our own mini database from scratch which has helped me begin to visualize how I would create one for the boba tea shop that me and my partner are designing for our project. I am also feeling more confident in how me and my partner will be able to answer and display the queries that we had thought of in deliverable 4.

